<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Awesomium.Windows.Forms</name>
    </assembly>
    <members>
        <member name="T:Awesomium.Windows.Forms.AddressBox">
            <summary>
            Represents a Windows Forms TextBox that behaves as an address-box
            and shows an auto-completion list with contents from the core's History.
            </summary>
            <remarks>
            By assigning a <see cref="T:Awesomium.Windows.Forms.WebControl"/>
            to the <see cref="P:Awesomium.Windows.Forms.AddressBox.WebControl"/> property,
            you allow the two controls to interact. The <see cref="T:Awesomium.Windows.Forms.AddressBox"/> will
            transfer navigation requests to the <see cref="T:Awesomium.Windows.Forms.WebControl"/>
            and update the <see cref="P:Awesomium.Windows.Forms.AddressBox.URL"/> property based on the URL
            currently loaded to the assigned <see cref="T:Awesomium.Windows.Forms.WebControl"/>.
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Forms.AddressBox.OnNavigate(Awesomium.Core.UrlEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.AddressBox.Navigate"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.AddressBox.RefreshAutoComplete">
            <summary>
            Updates the contents of the <see cref="T:System.Windows.Forms.AutoCompleteStringCollection"/>.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.AddressBox.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.AddressBox.OnGotFocus(System.EventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.AddressBox.OnLostFocus(System.EventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.AddressBox.OnMouseEnter(System.EventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.AddressBox.OnMouseLeave(System.EventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.AddressBox.OnEnter(System.EventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.AddressBox.OnLeave(System.EventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.AddressBox.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.AddressBox.OnVisibleChanged(System.EventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.AddressBox.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.AddressBox.WndProc(System.Windows.Forms.Message@)">
            <inheritdoc />
        </member>
        <member name="E:Awesomium.Windows.Forms.AddressBox.Navigate">
            <summary>
            Occurs when the user presses ENTER, after typing
            a valid URL in the <see cref="T:Awesomium.Windows.Forms.AddressBox"/>.
            </summary>
            <remarks>
            By assigning a <see cref="T:Awesomium.Windows.Forms.WebControl"/>
            to the <see cref="P:Awesomium.Windows.Forms.AddressBox.WebControl"/> property,
            you allow the two controls to interact. The <see cref="T:Awesomium.Windows.Forms.AddressBox"/> will
            transfer navigation requests to the <see cref="T:Awesomium.Windows.Forms.WebControl"/>
            and update its <see cref="P:Awesomium.Windows.Forms.AddressBox.Text"/> based on the URL
            currently loaded to the assigned <see cref="T:Awesomium.Windows.Forms.WebControl"/>.
            <p/>
            <note>
            You do not need to handle this event, if you assign
            a <see cref="T:Awesomium.Windows.Forms.WebControl"/>
            to the <see cref="P:Awesomium.Windows.Forms.AddressBox.WebControl"/> property.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Forms.AddressBox.WebControl">
            <summary>
            Gets or sets the <see cref="T:Awesomium.Windows.Forms.WebControl"/> currently
            assigned to this <see cref="T:Awesomium.Windows.Forms.AddressBox"/>.
            </summary>
            <remarks>
            When a <see cref="T:Awesomium.Windows.Forms.WebControl"/> has been assigned
            to this property, the value of <see cref="P:Awesomium.Windows.Forms.AddressBox.URL"/> is bound to the
            <see cref="P:Awesomium.Windows.Forms.WebControl.Source"/> property:
            <list type="bullet">
            <item>
            <description>
            Manually setting the <see cref="P:Awesomium.Windows.Forms.AddressBox.URL"/> property, will transfer
            a navigation request to the to the assigned <see cref="T:Awesomium.Windows.Forms.WebControl"/>.
            </description>
            </item>
            <item>
            <description>
            The value of <see cref="P:Awesomium.Windows.Forms.AddressBox.URL"/> is automatically updated based on the URL
            currently loaded to the assigned <see cref="T:Awesomium.Windows.Forms.WebControl"/>.
            </description>
            </item>
            </list>
            </remarks>
            <seealso cref="P:Awesomium.Windows.Forms.AddressBox.URL"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.AddressBox.URL">
            <summary>
            Gets or sets the URL currently displayed by the <see cref="T:Awesomium.Windows.Forms.AddressBox"/>.
            </summary>
            <remarks>
            When a <see cref="T:Awesomium.Windows.Forms.WebControl"/> has been assigned
            to the <see cref="P:Awesomium.Windows.Forms.AddressBox.WebControl"/> property,
            the value of this property is bound to the <see cref="P:Awesomium.Windows.Forms.WebControl.Source"/>
            property:
            <list type="bullet">
            <item>
            <description>
            Manually setting this property will transfer a navigation request to the
            to the assigned <see cref="T:Awesomium.Windows.Forms.WebControl"/>.
            </description>
            </item>
            <item>
            <description>
            The value of this property is automatically updated based on the URL
            currently loaded to the assigned <see cref="T:Awesomium.Windows.Forms.WebControl"/>.
            </description>
            </item>
            </list>
            </remarks>
            <seealso cref="P:Awesomium.Windows.Forms.AddressBox.WebControl"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.AddressBox.Multiline">
            <exclude />
        </member>
        <member name="P:Awesomium.Windows.Forms.AddressBox.Text">
            <exclude />
        </member>
        <member name="P:Awesomium.Windows.Forms.AddressBox.Font">
            <inheritdoc />
        </member>
        <member name="F:Awesomium.Windows.Forms.LoginForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.LoginForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Awesomium.Windows.Forms.LoginForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.GdiAPI.CreateCompatibleDC(System.IntPtr)">
            <summary>
            CreateCompatibleDC
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.GdiAPI.DeleteDC(System.IntPtr)">
            <summary>
            DeleteDC
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.GdiAPI.SelectObject(System.IntPtr,System.IntPtr)">
            <summary>
            SelectObject
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.GdiAPI.DeleteObject(System.Runtime.InteropServices.HandleRef)">
            <summary>
            DeleteObject
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.GdiAPI.CreateCompatibleBitmap(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            CreateCompatibleBitmap
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.GdiAPI.BitBlt(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,Awesomium.Windows.Forms.GdiAPI.TernaryRasterOperations)">
            <summary>
            BitBlt
            </summary>
        </member>
        <member name="T:Awesomium.Windows.Forms.GdiAPI.TernaryRasterOperations">
            <summary>
            Enumeration for the raster operations used in BitBlt.
            In C++ these are actually #define. But to use these
            constants with C#, a new enumeration type is defined.
            </summary>
        </member>
        <member name="T:Awesomium.Windows.Forms.ToolStripAddressBox">
            <summary>
            Represents a text box in a <see cref="T:System.Windows.Forms.ToolStrip"/> that behaves as an address-box
            and shows an auto-completion list with contents from the core's History.
            </summary>
            <remarks>
            By assigning a <see cref="T:Awesomium.Windows.Forms.WebControl"/>
            to the <see cref="P:Awesomium.Windows.Forms.ToolStripAddressBox.WebControl"/> property,
            you allow the two controls to interact. The <see cref="T:Awesomium.Windows.Forms.ToolStripAddressBox"/> will
            transfer navigation requests to the <see cref="T:Awesomium.Windows.Forms.WebControl"/>
            and update the <see cref="P:Awesomium.Windows.Forms.ToolStripAddressBox.URL"/> property based on the URL
            currently loaded to the assigned <see cref="T:Awesomium.Windows.Forms.WebControl"/>.
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.OnBorderStyleChanged(System.EventArgs)">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.OnBorderStyleChanged&quot;]/*"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.OnHideSelectionChanged(System.EventArgs)">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.OnHideSelectionChanged&quot;]/*"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.OnModifiedChanged(System.EventArgs)">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.OnModifiedChanged&quot;]/*"/> 
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.OnReadOnlyChanged(System.EventArgs)">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.OnReadOnlyChanged&quot;]/*"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.OnNavigate(Awesomium.Core.UrlEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Forms.ToolStripAddressBox.Navigate"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.AppendText(System.String)">
            <inheritdoc cref="M:System.Windows.Forms.TextBox.AppendText" />
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.Clear">
            <inheritdoc select='docs/doc[@for="ToolStripTextBox.Clear"]/*' />
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.ClearUndo">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.ClearUndo&quot;]/*"/> 
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.Copy">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.Copy&quot;]/*"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.Cut">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.Cut&quot;]/*"/> 
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.DeselectAll">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.DeselectAll&quot;]/*"/> 
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.GetCharFromPosition(System.Drawing.Point)">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.GetCharFromPosition&quot;]/*"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.GetCharIndexFromPosition(System.Drawing.Point)">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.GetCharIndexFromPosition&quot;]/*"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.GetFirstCharIndexFromLine(System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.GetFirstCharIndexFromLine&quot;]/*"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.GetFirstCharIndexOfCurrentLine">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.GetFirstCharIndexOfCurrentLine&quot;]/*"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.GetLineFromCharIndex(System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.GetLineFromCharIndex&quot;]/*"/> 
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.GetPositionFromCharIndex(System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.GetPositionFromCharIndex&quot;]/*"/> 
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.Paste">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.Paste&quot;]/*"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.ScrollToCaret">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.ScrollToCaret&quot;]/*"/> 
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.Select(System.Int32,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.Select&quot;]/*"/> 
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.SelectAll">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.SelectAll&quot;]/*"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.Undo">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.Undo&quot;]/*"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.OnSubscribeControlEvents(System.Windows.Forms.Control)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.OnUnsubscribeControlEvents(System.Windows.Forms.Control)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.ToolStripAddressBox.GetPreferredSize(System.Drawing.Size)">
            <inheritdoc />
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.WebControl">
            <summary>
            Gets or sets the <see cref="T:Awesomium.Windows.Forms.WebControl"/> currently
            assigned to this <see cref="T:Awesomium.Windows.Forms.ToolStripAddressBox"/>.
            </summary>
            <remarks>
            When a <see cref="T:Awesomium.Windows.Forms.WebControl"/> has been assigned
            to this property, the value of <see cref="P:Awesomium.Windows.Forms.ToolStripAddressBox.URL"/> is bound to the
            <see cref="P:Awesomium.Windows.Forms.WebControl.Source"/> property:
            <list type="bullet">
            <item>
            <description>
            Manually setting the <see cref="P:Awesomium.Windows.Forms.ToolStripAddressBox.URL"/> property, will transfer
            a navigation request to the to the assigned <see cref="T:Awesomium.Windows.Forms.WebControl"/>.
            </description>
            </item>
            <item>
            <description>
            The value of <see cref="P:Awesomium.Windows.Forms.ToolStripAddressBox.URL"/> is automatically updated based on the URL
            currently loaded to the assigned <see cref="T:Awesomium.Windows.Forms.WebControl"/>.
            </description>
            </item>
            </list>
            </remarks>
            <seealso cref="P:Awesomium.Windows.Forms.ToolStripAddressBox.URL"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.URL">
            <summary>
            Gets or sets the URL currently displayed by the <see cref="T:Awesomium.Windows.Forms.ToolStripAddressBox"/>.
            </summary>
            <remarks>
            When a <see cref="T:Awesomium.Windows.Forms.WebControl"/> has been assigned
            to the <see cref="P:Awesomium.Windows.Forms.ToolStripAddressBox.WebControl"/> property,
            the value of this property is bound to the <see cref="P:Awesomium.Windows.Forms.WebControl.Source"/>
            property:
            <list type="bullet">
            <item>
            <description>
            Manually setting this property will transfer a navigation request to the
            to the assigned <see cref="T:Awesomium.Windows.Forms.WebControl"/>.
            </description>
            </item>
            <item>
            <description>
            The value of this property is automatically updated based on the URL
            currently loaded to the assigned <see cref="T:Awesomium.Windows.Forms.WebControl"/>.
            </description>
            </item>
            </list>
            </remarks>
            <seealso cref="P:Awesomium.Windows.Forms.ToolStripAddressBox.WebControl"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.BorderStyle">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.BorderStyle&quot;]/*"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.CanUndo">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.CanUndo&quot;]/*"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.CharacterCasing">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.CharacterCasing&quot;]/*"/> 
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.HideSelection">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.HideSelection&quot;]/*"/> 
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.Modified">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.Modified&quot;]/*"/> 
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.ReadOnly">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.ReadOnly&quot;]/*"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.SelectedText">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.SelectedText&quot;]/*"/> 
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.SelectionLength">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.SelectionLength&quot;]/*"/> 
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.SelectionStart">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.SelectionStart&quot;]/*"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.ShortcutsEnabled">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.ShortcutsEnabled&quot;]/*"/> 
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.TextLength">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.TextLength&quot;]/*"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.WordWrap">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.WordWrap&quot;]/*"/> 
        </member>
        <member name="E:Awesomium.Windows.Forms.ToolStripAddressBox.BorderStyleChanged">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.BorderStyleChanged&quot;]/*"/>
        </member>
        <member name="E:Awesomium.Windows.Forms.ToolStripAddressBox.HideSelectionChanged">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.HideSelectionChanged&quot;]/*"/>
        </member>
        <member name="E:Awesomium.Windows.Forms.ToolStripAddressBox.ModifiedChanged">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.ModifiedChanged&quot;]/*"/>
        </member>
        <member name="E:Awesomium.Windows.Forms.ToolStripAddressBox.ReadOnlyChanged">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.ReadOnlyChanged&quot;]/*"/> 
        </member>
        <member name="E:Awesomium.Windows.Forms.ToolStripAddressBox.TextBoxTextAlignChanged">
            <!-- Failed to insert some or all of included XML --><include file="doc\WinBarTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.TextAlignChanged&quot;]/*"/>
        </member>
        <member name="E:Awesomium.Windows.Forms.ToolStripAddressBox.Navigate">
            <summary>
            Occurs when the user presses ENTER, after typing
            a valid URL in the <see cref="T:Awesomium.Windows.Forms.ToolStripAddressBox"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.TextBox">
            <summary>
            Gets the hosted <see cref="T:Awesomium.Windows.Forms.AddressBox"/> control.
            </summary>
            <returns>
            The hosted <see cref="T:Awesomium.Windows.Forms.AddressBox"/> control.
            </returns>
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.Text">
            <exclude />
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.BackgroundImage">
            <exclude />
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.BackgroundImageLayout">
            <exclude />
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.DefaultMargin">
            <!-- Failed to insert some or all of included XML --><include file="doc\ToolStripTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.DefaultMargin&quot;]/*"/> 
            <devdoc>
            Deriving classes can override this to configure a default size for their control. 
            This is more efficient than setting the size in the control's constructor. 
            </devdoc>
        </member>
        <member name="P:Awesomium.Windows.Forms.ToolStripAddressBox.DefaultSize">
            <!-- Failed to insert some or all of included XML --><include file="doc\ToolStripTextBox.uex" path="docs/doc[@for=&quot;ToolStripTextBox.DefaultSize&quot;]/*"/>
        </member>
        <member name="T:Awesomium.Windows.Forms.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Forms.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Forms.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:Awesomium.Windows.Forms.Utilities">
            <summary>
            Utility class providing helper methods that can be used by Windows Forms applications.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.Utilities.GetCursor(Awesomium.Core.CursorType)">
            <summary>
            Gets the Windows Forms <see cref="T:System.Windows.Forms.Cursor"/> equivalent of an Awesomium <see cref="T:Awesomium.Core.CursorType"/>.
            </summary>
            <param name="cursor">
            The Awesomium cursor type. You can get this by handling the <see cref="E:Awesomium.Core.WebView.CursorChanged"/> event.
            </param>
            <returns>
            A Windows Forms <see cref="T:System.Windows.Forms.Cursor"/>, or null (Nothing in VB) if <see cref="F:Awesomium.Core.CursorType.None"/>
            is specified.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Forms.Utilities.GetCursor(Awesomium.Core.ChangeCursorEventArgs)">
            <summary>
            Gets the Windows Forms <see cref="T:System.Windows.Forms.Cursor"/> equivalent of an Awesomium <see cref="T:Awesomium.Core.CursorType"/>.
            </summary>
            <param name="e">
            The data provided to <see cref="E:Awesomium.Core.WebView.CursorChanged"/> event handler.
            </param>
            <returns>
            A Windows Forms <see cref="T:System.Windows.Forms.Cursor"/>, or null (Nothing in VB) if <see cref="F:Awesomium.Core.CursorType.None"/>
            is specified.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Forms.Utilities.GetKeyboardEvent(System.Windows.Forms.KeyEventArgs,Awesomium.Core.WebKeyType)">
            <summary>
            Gets an Awesomium <see cref="T:Awesomium.Core.WebKeyboardEvent"/> equivalent of a Windows Forms key-down or key-up event.
            </summary>
            <param name="e">
            The Windows Forms key-down or key-up event arguments.
            </param>
            <param name="eventType">
            Indicates if this is a key-down or key-up event.
            </param>
            <returns>
            An instance of a <see cref="T:Awesomium.Core.WebKeyboardEvent"/> representing the Awesomium equivalent of a
            Windows Forms key-down or key-up event.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Forms.Utilities.GetKeyboardEvent(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Gets an Awesomium <see cref="T:Awesomium.Core.WebKeyboardEvent"/> equivalent of a Windows Forms key-press event.
            </summary>
            <param name="e">
            The Windows Forms key-press event arguments.
            </param>
            <returns>
            An instance of a <see cref="T:Awesomium.Core.WebKeyboardEvent"/> representing the Awesomium equivalent of a
            Windows Forms key-press event.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Forms.Utilities.DrawBuffer(Awesomium.Core.RenderBuffer,System.Drawing.Bitmap@,Awesomium.Core.RenderOperations)">
            <summary>
            Draws the contents of a <see cref="T:Awesomium.Core.RenderBuffer"/> to a <see cref="T:System.Drawing.Bitmap"/>.
            </summary>
            <param name="rBuffer">
            The pixel buffer of a view. You can get this by calling <see cref="M:Awesomium.Core.WebView.Render"/>,
            when a view is dirty.
            </param>
            <param name="b">
            A reference to the <see cref="T:System.Drawing.Bitmap"/> that is filled with the contents of the specified
            pixel buffer. This can be a null reference in which case a new bitmap will be created.
            Keep a reference to this bitmap for subsequent calls to this method. This prevents useless
            overhead when the size of the pixel buffer has not changed and a creation of a new bitmap
            is not required.
            </param>
            <param name="rop">
            Defines the operation that will be used for creating the new bitmap.
            For details, see the <see cref="T:Awesomium.Core.RenderOperations"/> enumeration.
            </param>
            <remarks>
            You do not need to check for changes to the size of the pixel buffer before calling this method.
            </remarks>
            <seealso cref="P:Awesomium.Core.WebView.IsDirty"/>
            <seealso cref="M:Awesomium.Core.WebView.Render"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.Utilities.DrawBuffer(Awesomium.Core.RenderBuffer,System.Drawing.Bitmap@)">
            <summary>
            Draws the contents of a <see cref="T:Awesomium.Core.RenderBuffer"/> to a <see cref="T:System.Drawing.Bitmap"/>.
            </summary>
            <param name="rBuffer">
            The pixel buffer of a view. You can get this by calling <see cref="M:Awesomium.Core.WebView.Render"/>,
            when a view is dirty.
            </param>
            <param name="b">
            A reference to the <see cref="T:System.Drawing.Bitmap"/> that is filled with the contents of the specified
            pixel buffer. This can be a null reference in which case a new bitmap will be created.
            Keep a reference to this bitmap for subsequent calls to this method. This prevents useless
            overhead when the size of the pixel buffer has not changed and a creation of a new bitmap
            is not required.
            </param>
            <remarks>
            You do not need to check for changes to the size of the pixel buffer before calling this method.
            </remarks>
            <seealso cref="P:Awesomium.Core.WebView.IsDirty"/>
            <seealso cref="M:Awesomium.Core.WebView.Render"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.Utilities.DrawBuffer(Awesomium.Core.RenderBuffer,System.Drawing.Graphics,System.Drawing.Bitmap@)">
            <summary>
            Draws the contents of a <see cref="T:Awesomium.Core.RenderBuffer"/> to a <see cref="T:System.Drawing.Bitmap"/> and draws the bitmap
            to a drawing surface.
            </summary>
            <param name="rBuffer">
            The pixel buffer of a view. You can get this by calling <see cref="M:Awesomium.Core.WebView.Render"/>,
            when a view is dirty.
            </param>
            <param name="g">
            A <see cref="T:System.Drawing.Graphics"/> instance representing the drawing surface used to paint.
            </param>
            <param name="b">
            A reference to the <see cref="T:System.Drawing.Bitmap"/> that is filled with the contents of the specified
            pixel buffer. This can be a null reference in which case a new bitmap will be created.
            Keep a reference to this bitmap for subsequent calls to this method. This prevents useless
            overhead when the size of the pixel buffer has not changed and a creation of a new bitmap
            is not required.
            </param>
            <remarks>
            You do not need to check for changes to the size of the pixel buffer before calling this method.
            <p/>
            <note>
            The specified <see cref="T:System.Drawing.Graphics"/> is not being disposed. You do not need to dispose it
            if you get it from within a managed event handler such as <see cref="M:System.Windows.Forms.Form.OnPaint(System.Windows.Forms.PaintEventArgs)"/>, but you
            may need to dispose it after calling this method, if you get it from a different device context.
            </note>
            </remarks>
            <seealso cref="P:Awesomium.Core.WebView.IsDirty"/>
            <seealso cref="M:Awesomium.Core.WebView.Render"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.Utilities.DrawBuffer(Awesomium.Core.RenderBuffer,System.Drawing.Graphics,System.Drawing.Color,System.Drawing.Bitmap@)">
            <summary>
            Draws the contents of a <see cref="T:Awesomium.Core.RenderBuffer"/> to a <see cref="T:System.Drawing.Bitmap"/> and draws the bitmap
            to a drawing surface.
            </summary>
            <param name="rBuffer">
            The pixel buffer of a view. You can get this by calling <see cref="M:Awesomium.Core.WebView.Render"/>,
            when a view is dirty.
            </param>
            <param name="g">
            A <see cref="T:System.Drawing.Graphics"/> instance representing the drawing surface used to paint.
            </param>
            <param name="color">
            <see cref="T:System.Drawing.Color"/> structure that represents the background color of the
            drawing surface. The method clears the entire drawing surface and fills it with the specified background
            color, before drawing the new bitmap.
            </param>
            <param name="b">
            A reference to the <see cref="T:System.Drawing.Bitmap"/> that is filled with the contents of the specified
            pixel buffer. This can be a null reference in which case a new bitmap will be created.
            Keep a reference to this bitmap for subsequent calls to this method. This prevents useless
            overhead when the size of the pixel buffer has not changed and a creation of a new bitmap
            is not required.
            </param>
            <remarks>
            You do not need to check for changes to the size of the pixel buffer before calling this method.
            <p/>
            <note>
            The specified <see cref="T:System.Drawing.Graphics"/> is not being disposed. You do not need to dispose it
            if you get it from within a managed event handler such as <see cref="M:System.Windows.Forms.Form.OnPaint(System.Windows.Forms.PaintEventArgs)"/>, but you
            may need to dispose it after calling this method, if you get it from a different device context.
            </note>
            </remarks>
            <seealso cref="P:Awesomium.Core.WebView.IsDirty"/>
            <seealso cref="M:Awesomium.Core.WebView.Render"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.Utilities.GetRectangle(Awesomium.Core.AweRect)">
            <summary>
            Gets a <see cref="T:System.Drawing.Rectangle"/> equivalent of an Awesomium <see cref="T:Awesomium.Core.AweRect"/>.
            </summary>
            <param name="aweRect">
            An <see cref="T:Awesomium.Core.AweRect"/> value representing an Awesomium rectangle.
            </param>
            <returns>
            A <see cref="T:System.Drawing.Rectangle"/> value equivalent of an Awesomium <see cref="T:Awesomium.Core.AweRect"/>.
            </returns>
        </member>
        <member name="T:Awesomium.Windows.Forms.WebControl">
            <summary>
            Represents a Windows Forms control that wraps an Awesomium web view.
            You can use it to embed Awesomium directly in your WinForms application without any additional work.
            </summary>
            <remarks>
            You can create an instance of this class by directly invoking the
            default constructor (either by dropping it in your designer surface or from code). 
            You do not need to explicitly create an instance of a web view through <see cref="T:Awesomium.Core.WebCore"/>.
            <c>WebControl</c> takes care of this internally.
            <p/>
            <note>
            Note that it is safe to use this control in a design environment for layout and configuration
            purposes. The <see cref="T:Awesomium.Core.WebCore"/> and the underlying web-view are only instantiated during runtime.
            </note>
            <p/>
            <h4>The Role of the <see cref="P:System.Windows.Forms.Control.Enabled"/> Property:</h4>
            In addition to its regular meaning, the <see cref="P:System.Windows.Forms.Control.Enabled"/> property indicates
            if internal asynchronous rendering of the underlying web-view, is currently enabled.
            <note>
            All rendering in the underlying web-view is actually done asynchronously in a separate process
            and so the page is usually continuously rendering internally. Setting <see cref="P:System.Windows.Forms.Control.Enabled"/>
            to <c>false</c>, will temporarily pause rendering. This may be really important, if <see cref="P:Awesomium.Windows.Forms.WebControl.SelfUpdate"/>
            is enabled.
            </note>
            <h4>The Role of the <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/> Property:</h4>
            A <see cref="T:Awesomium.Windows.Forms.WebControl"/> is considered invalid when it is:
            <list type="bullet">
            <item>
            <description>
            Crashed (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsCrashed"/>).
            <note>
            When crashed, this control will attempt to recreate its underlying view.
            For details, see: <see cref="P:Awesomium.Windows.Forms.WebControl.IsCrashed"/>.
            </note>
            </description>
            </item>
            <item>
            <description>
            Prematurely destroyed (see <see cref="M:Awesomium.Windows.Forms.WebControl.Close"/> and <see cref="M:Awesomium.Core.WebCore.Shutdown"/>).
            </description>
            </item>
            <item>
            <description>
            Not properly instantiated. This means that something went wrong
            during instantiation of either the <see cref="T:Awesomium.Core.WebCore"/> (if this
            is the first <see cref="T:Awesomium.Windows.Forms.WebControl"/> created) or of the
            underlying web-view.
            </description>
            </item>
            </list>
            <note type="caution">
            Developers should always check this property before calling <see cref="T:Awesomium.Core.IWebView"/>
            members implemented by this <see cref="T:Awesomium.Windows.Forms.WebControl"/>. Trying to access the underlying
            web-view when it is not alive, can throw an <see cref="T:System.InvalidOperationException"/>.
            <p/>
            For more details, refer to the documentation of this control's members.
            </note>
            <note>
            <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/> also returns <c>false</c> when the control is shown in a designer.
            The Awesomium <see cref="T:Awesomium.Core.WebCore"/> and the underlying web-view, are only instantiated
            during runtime.
            </note>
            </remarks>
            <threadsafety static="true" instance="false"/>
            <seealso cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>
            <seealso cref="P:Awesomium.Windows.Forms.WebControl.IsCrashed"/>
            <seealso cref="P:Awesomium.Windows.Forms.WebControl.SelfUpdate"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnIsDirtyChanged(System.Object,System.EventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Forms.WebControl.IsDirtyChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnBeginLoading(System.Object,Awesomium.Core.BeginLoadingEventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Forms.WebControl.BeginLoading"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnBeginNavigation(System.Object,Awesomium.Core.BeginNavigationEventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Forms.WebControl.BeginNavigation"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnCursorChanged(System.Object,Awesomium.Core.ChangeCursorEventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Forms.WebControl.CursorChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnKeyboardFocusChanged(System.Object,Awesomium.Core.ChangeKeyboardFocusEventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Forms.WebControl.KeyboardFocusChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnTargetUrlChanged(System.Object,Awesomium.Core.UrlEventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Forms.WebControl.TargetUrlChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnToolTipChanged(System.Object,Awesomium.Core.ChangeToolTipEventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Forms.WebControl.ToolTipChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnDomReady(System.Object,System.EventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Forms.WebControl.DomReady"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnLoadCompleted(System.Object,System.EventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Forms.WebControl.LoadCompleted"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnPageContentsReceived(System.Object,Awesomium.Core.GetPageContentsEventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Forms.WebControl.PageContentsReceived"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnOpenExternalLink(System.Object,Awesomium.Core.OpenExternalLinkEventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Forms.WebControl.OpenExternalLink"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnPluginCrashed(System.Object,Awesomium.Core.PluginCrashedEventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Forms.WebControl.PluginCrashed"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnTitleReceived(System.Object,Awesomium.Core.ReceiveTitleEventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Forms.WebControl.TitleReceived"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnMove(System.Object,Awesomium.Core.MoveEventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Forms.WebControl.Move"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnDownload(System.Object,Awesomium.Core.UrlEventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Forms.WebControl.Download"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnCrashed(System.Object,System.EventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Forms.WebControl.Crashed"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnSelectLocalFiles(System.Object,Awesomium.Core.SelectLocalFilesEventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Forms.WebControl.SelectLocalFiles"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnScrollDataReceived(System.Object,Awesomium.Core.ScrollDataEventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Forms.WebControl.ScrollDataReceived"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnJSConsoleMessageAdded(System.Object,Awesomium.Core.JSConsoleMessageEventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Forms.WebControl.JSConsoleMessageAdded"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnFindResultsReceived(System.Object,Awesomium.Core.GetFindResultsEventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Forms.WebControl.FindResultsReceived"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnSelectionChanged(System.Object,Awesomium.Core.WebSelectionEventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Forms.WebControl.SelectionChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnImeUpdated(System.Object,Awesomium.Core.UpdateImeEventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Forms.WebControl.ImeUpdated"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnContextMenu(System.Object,Awesomium.Core.ContextMenuEventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Forms.WebControl.ShowContextMenu"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnLoginRequest(System.Object,Awesomium.Core.LoginRequestEventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Forms.WebControl.LoginRequest"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnHistoryChanged(System.Object,Awesomium.Core.ChangeHistoryEventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Forms.WebControl.HistoryChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnResizeComplete(System.Object,Awesomium.Core.ResizeEventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Forms.WebControl.ResizeComplete"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnJavascriptDialog(System.Object,Awesomium.Core.JavascriptDialogEventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Forms.WebControl.ShowJavascriptDialog"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnResourceRequest(System.Object,Awesomium.Core.ResourceRequestEventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Forms.WebControl.ResourceRequest"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnResourceResponse(System.Object,Awesomium.Core.ResourceResponseEventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Forms.WebControl.ResourceResponse"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.Close">
            <summary>
            Destroys and removes this web view control. Any call to members of this control
            after calling this method, will cause a <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <remarks>
            To avoid exceptions, do not call this method when the hosting UI of the control (if any)
            is still alive and visible.
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnHandleCreated(System.EventArgs)">
            <inheritdoc/>
            <remarks>
            Initialization of the <see cref="T:Awesomium.Core.WebCore"/> (if needed)
            and of the underlying web-view, occurs after the control's
            handle is created.
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnEnabledChanged(System.EventArgs)">
            <inheritdoc/>
            <remarks>
            In addition to its regular meaning, the <see cref="P:System.Windows.Forms.Control.Enabled"/> property indicates
            if internal asynchronous rendering of the underlying web-view, is currently active.
            <note>
            All rendering in the underlying web-view is actually done asynchronously in a separate process
            and so the page is usually continuously rendering internally. Setting <see cref="P:System.Windows.Forms.Control.Enabled"/>
            to <c>false</c>, will temporarily pause rendering. This may be really important, if <see cref="P:Awesomium.Windows.Forms.WebControl.SelfUpdate"/>
            is enabled.
            </note>
            <note type="inherit">
            Inheritors can override <see cref="M:Awesomium.Windows.Forms.WebControl.OnEnabledChanged(System.EventArgs)"/>, then set <see cref="P:Awesomium.Windows.Forms.WebControl.IsRendering"/>
            manually if they want to <i>disconnect</i> internal asynchronous 
            rendering, from the control's enabled status.
            </note>
            </remarks>
            <seealso cref="P:Awesomium.Windows.Forms.WebControl.SelfUpdate"/>
            <seealso cref="P:Awesomium.Windows.Forms.WebControl.IsRendering"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnGotFocus(System.EventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnLostFocus(System.EventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnResize(System.EventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.ProcessDialogKey(System.Windows.Forms.Keys)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnMouseLeave(System.EventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.HandleInput(Awesomium.Core.ViewInput)">
            <summary>
            Gets if the specified kind of input should be handled by the control.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.Render">
            <summary>
            Renders this <see cref="T:Awesomium.Windows.Forms.WebControl"/> into an offscreen pixel buffer and clears the dirty state.
            </summary>
            <remarks>
            For maximum efficiency, you should only call this when the <see cref="T:Awesomium.Windows.Forms.WebControl"/> is dirty 
            (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsDirty"/>).
            The most appropriate time to call this method, is from within your <see cref="E:Awesomium.Windows.Forms.WebControl.IsDirtyChanged"/> handler.
            <note type="inherit">
            <see cref="T:Awesomium.Windows.Forms.WebControl"/> handles this internally. Inheritors do not need to call this method unless
            they implement custom logic.
            </note>
            <note type="caution">
            For performance reasons, no validity check is performed when calling protected members.
            Inheritors should perform any such checks (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>), before calling these members.
            </note>
            </remarks>
            <returns>
            An instance of the <see cref="T:Awesomium.Core.RenderBuffer"/> that this <see cref="T:Awesomium.Windows.Forms.WebControl"/> was rendered to. 
            This value may change between renders and may return null if the <see cref="T:Awesomium.Windows.Forms.WebControl"/> has crashed
            (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsCrashed"/>).
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.InjectMouseMove(System.Int32,System.Int32)">
            <summary>
            Injects a mouse-move event in local coordinates.
            </summary>
            <param name="x">
            The absolute x-coordinate of the mouse (relative to the <see cref="T:Awesomium.Windows.Forms.WebControl"/> itself).
            </param>
            <param name="y">
            The absolute y-coordinate of the mouse (relative to the <see cref="T:Awesomium.Windows.Forms.WebControl"/> itself).
            </param>
            <remarks>
            <note type="inherit">
            <see cref="T:Awesomium.Windows.Forms.WebControl"/> handles this internally. Inheritors do not need to call this method unless
            they implement custom logic.
            </note>
            <note>
            This method bypasses settings of the <see cref="P:Awesomium.Windows.Forms.WebControl.InputController"/>.
            </note>
            <note type="caution">
            For performance reasons, no validity check is performed when calling protected members.
            Inheritors should perform any such checks (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>), before calling these members.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.InjectMouseDown(Awesomium.Core.MouseButton)">
            <summary>
            Injects a mouse-down event.
            </summary>
            <param name="mouseButton">
            The mouse button that was pressed.
            </param>
            <remarks>
            <note type="inherit">
            <see cref="T:Awesomium.Windows.Forms.WebControl"/> handles this internally. Inheritors do not need to call this method unless
            they implement custom logic.
            </note>
            <note>
            This method bypasses settings of the <see cref="P:Awesomium.Windows.Forms.WebControl.InputController"/>.
            </note>
            <note type="caution">
            For performance reasons, no validity check is performed when calling protected members.
            Inheritors should perform any such checks (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>), before calling these members.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.InjectMouseUp(Awesomium.Core.MouseButton)">
            <summary>
            Injects a mouse-up event.
            </summary>
            <param name="mouseButton">
            The mouse button that was released.
            </param>
            <remarks>
            <note type="inherit">
            <see cref="T:Awesomium.Windows.Forms.WebControl"/> handles this internally. Inheritors do not need to call this method unless
            they implement custom logic.
            </note>
            <note>
            This method bypasses settings of the <see cref="P:Awesomium.Windows.Forms.WebControl.InputController"/>.
            </note>
            <note type="caution">
            For performance reasons, no validity check is performed when calling protected members.
            Inheritors should perform any such checks (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>), before calling these members.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.InjectMouseWheel(System.Int32)">
            <summary>
            Injects a mouse-wheel event.
            </summary>
            <param name="scrollAmountVert">
            The relative amount of pixels to scroll vertically.
            </param>
            <remarks>
            <note type="inherit">
            <see cref="T:Awesomium.Windows.Forms.WebControl"/> handles this internally. Inheritors do not need to call this method unless
            they implement custom logic.
            </note>
            <note>
            This method bypasses settings of the <see cref="P:Awesomium.Windows.Forms.WebControl.InputController"/>.
            </note>
            <note type="caution">
            For performance reasons, no validity check is performed when calling protected members.
            Inheritors should perform any such checks (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>), before calling these members.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.InjectMouseWheel(System.Int32,System.Int32)">
            <summary>
            Injects a mouse-wheel event.
            </summary>
            <param name="scrollAmountVert">
            The relative amount of pixels to scroll vertically.
            </param>
            <param name="scrollAmountHorz">
            The relative amount of pixels to scroll horizontally.
            </param>
            <remarks>
            <note type="inherit">
            <see cref="T:Awesomium.Windows.Forms.WebControl"/> handles this internally. Inheritors do not need to call this method unless
            they implement custom logic.
            </note>
            <note>
            This method bypasses settings of the <see cref="P:Awesomium.Windows.Forms.WebControl.InputController"/>.
            </note>
            <note type="caution">
            For performance reasons, no validity check is performed when calling protected members.
            Inheritors should perform any such checks (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>), before calling these members.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.InjectKeyboardEvent(Awesomium.Core.WebKeyboardEvent)">
            <summary>
            Injects a keyboard event.
            </summary>
            <param name="keyEvent">
            The keyboard event to inject. You'll need to initialize the members of the passed
            <see cref="T:Awesomium.Core.WebKeyboardEvent"/>, yourself.
            </param>
            <remarks>
            <note type="inherit">
            <see cref="T:Awesomium.Windows.Forms.WebControl"/> handles this internally. Inheritors do not need to call this method unless
            they implement custom logic.
            </note>
            <note>
            This method bypasses settings of the <see cref="P:Awesomium.Windows.Forms.WebControl.InputController"/>.
            </note>
            <note type="caution">
            For performance reasons, no validity check is performed when calling protected members.
            Inheritors should perform any such checks (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>), before calling these members.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.InjectKeyboardEventWin(System.Int32,System.Int32,System.Int32)">
            <summary>
            Injects a keyboard event by translating the respective Windows Messages.
            </summary>
            <param name="msg">
            The Windows keyboard message (usually <c>WM_KEYDOWN</c>, <c>WM_KEYUP</c> and <c>WM_CHAR</c>). 
            </param>
            <param name="wparam">
            The first parameter of the message as intercepted by the window procedure.
            </param>
            <param name="lparam">
            The second parameter of the message as intercepted by the window procedure.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Forms.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>).
            </exception>
            <remarks>
            This is usually easier to use than <see cref="M:Awesomium.Windows.Forms.WebControl.InjectKeyboardEvent(Awesomium.Core.WebKeyboardEvent)"/>. All you have to
            do is hook into the window procedure of this view's host, intercept <c>WM_KEYDOWN</c>, 
            <c>WM_KEYUP</c> and <c>WM_CHAR</c> and inject them to the view by using this method.
            <note type="inherit">
            <see cref="T:Awesomium.Windows.Forms.WebControl"/> handles this internally. Inheritors do not need to call this method unless
            they implement custom logic.
            </note>
            <note type="tip">
            Beware that in WPF, only the parent Window has a window procedure. Make sure
            that you only inject messages when the actual host (if it's a child element)
            has the focus, and that you do not hook into the same procedure multiple times.
            </note>
            <note>
            This method bypasses settings of the <see cref="P:Awesomium.Windows.Forms.WebControl.InputController"/>.
            </note>
            <note type="caution">
            For performance reasons, no validity check is performed when calling protected members.
            Inheritors should perform any such checks (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>), before calling these members.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.Resize(System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Resizes this <see cref="T:Awesomium.Windows.Forms.WebControl"/> to certain dimensions. This operation can fail
            if another resize is already pending (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsResizing"/>) or if
            the repaint timeout was exceeded.
            </summary>
            <param name="width">
            The width in pixels to resize to.
            </param>
            <param name="height">
            The height in pixels to resize to.
            </param>
            <param name="waitForRepaint">
            Whether or not to wait for the <see cref="T:Awesomium.Windows.Forms.WebControl"/> to finish repainting to avoid flicker
            (default is true).
            </param>
            <param name="repaintTimeoutMs">
            The max amount of time to wait for a repaint, in milliseconds.
            </param>
            <returns>
            True if the resize was successful. False otherwise.
            </returns>
            <remarks>
            <note type="inherit">
            <see cref="T:Awesomium.Windows.Forms.WebControl"/> handles this internally. Inheritors do not need to call this method unless
            they implement custom logic.
            </note>
            <note type="caution">
            For performance reasons, no validity check is performed when calling protected members.
            Inheritors should perform any such checks (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>), before calling these members.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.UnfocusView">
            <summary>
            Notifies the current page that it has lost focus.
            </summary>
            <remarks>
            <note type="inherit">
            <see cref="T:Awesomium.Windows.Forms.WebControl"/> handles this internally. Inheritors do not need to call this method unless
            they implement custom logic.
            </note>
            <note type="caution">
            For performance reasons, no validity check is performed when calling protected members.
            Inheritors should perform any such checks (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>), before calling these members.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.FocusView">
            <summary>
            Notifies the current page that it has gained focus.
            </summary>
            <remarks>
            You will need to call this to gain text-box focus, among other things. 
            (If you fail to ever see a blinking caret when typing text, this is why.)
            </remarks>
            <remarks>
            <note type="inherit">
            <see cref="T:Awesomium.Windows.Forms.WebControl"/> handles this internally. Inheritors do not need to call this method unless
            they implement custom logic.
            </note>
            <note type="caution">
            For performance reasons, no validity check is performed when calling protected members.
            Inheritors should perform any such checks (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>), before calling these members.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.GoToHome">
            <summary>
            Navigates to the Home URL as defined in <see cref="P:Awesomium.Core.WebCore.HomeURL"/>.
            </summary>
            <returns>
            True if the view is alive and the command was successfully sent. False otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.LoadURL(System.String)">
            <summary>
            Loads a URL into the <see cref="T:Awesomium.Windows.Forms.WebControl"/> asynchronously.
            </summary>
            <param name="url">
            The URL to load.
            </param>
            <returns>
            True if the view is alive and the command was successfully sent. False otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.LoadURL(System.String,System.String)">
            <summary>
            Loads a URL into the <see cref="T:Awesomium.Windows.Forms.WebControl"/> asynchronously.
            </summary>
            <param name="url">
            The URL to load.
            </param>
            <param name="frameName">
            The name of the frame to load the URL in; leave this blank to load in the main frame.
            </param>
            <returns>
            True if the view is alive and the command was successfully sent. False otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.LoadURL(System.String,System.String,System.String,System.String)">
            <summary>
            Loads a URL into the <see cref="T:Awesomium.Windows.Forms.WebControl"/> asynchronously.
            </summary>
            <param name="url">
            The URL to load.
            </param>
            <param name="frameName">
            The name of the frame to load the URL in; leave this blank to load in the main frame.
            </param>
            <param name="username">
            If the URL requires authentication, the username to authorize as, otherwise just pass an empty string.
            </param>
            <param name="password">
            If the URL requires authentication, the password to use, otherwise just pass an empty string.
            </param>
            <returns>
            True if the view is alive and the command was successfully sent. False otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.LoadHTML(System.String)">
            <summary>
            Loads a string of HTML into the <see cref="T:Awesomium.Windows.Forms.WebControl"/> asynchronously.
            </summary>
            <param name="html">
            The HTML string (ASCII) to load.
            </param>
            <remarks>
            Any assets required by the specified HTML (images etc.), should exist 
            within the base directory set with <see cref="P:Awesomium.Core.WebCore.BaseDirectory"/>.
            </remarks>
            <returns>
            True if the view is alive and the command was successfully sent. False otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.LoadHTML(System.String,System.String)">
            <summary>
            Loads a string of HTML into the <see cref="T:Awesomium.Windows.Forms.WebControl"/> asynchronously.
            </summary>
            <param name="html">
            The HTML string (ASCII) to load.
            </param>
            <param name="frameName">
            The name of the frame to load the HTML in.
            </param>
            <returns>
            True if the view is alive and the command was successfully sent. False otherwise.
            </returns>
            <remarks>
            Any assets required by the specified HTML (images etc.), should exist 
            within the base directory set with <see cref="P:Awesomium.Core.WebCore.BaseDirectory"/>.
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.LoadFile(System.String)">
            <summary>
            Loads a local file into the <see cref="T:Awesomium.Windows.Forms.WebControl"/> asynchronously.
            </summary>
            <param name="file">
            The name of the file to load.
            </param>
            <remarks>
            The file should exist within the base directory set with <see cref="P:Awesomium.Core.WebCore.BaseDirectory"/>.
            </remarks>
            <returns>
            True if the view is alive and the command was successfully sent. False otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.LoadFile(System.String,System.String)">
            <summary>
            Loads a local file into the <see cref="T:Awesomium.Windows.Forms.WebControl"/> asynchronously.
            </summary>
            <param name="file">
            The name of the file to load.
            </param>
            <param name="frameName">
            The name of the frame to load the file in.
            </param>
            <returns>
            True if the view is alive and the command was successfully sent. False otherwise.
            </returns>
            <remarks>
            <note>
            The file should exist within the base directory set with <see cref="P:Awesomium.Core.WebCore.BaseDirectory"/>.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.GoToHistoryOffset(System.Int32)">
            <summary>
            Navigates back/forward in history via a relative offset.
            </summary>
            <param name="offset">
            The relative offset in history to navigate to. (Can be negative)
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Forms.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.GoBack">
            <summary>
            Navigates one step back in history.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Forms.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.GoForward">
            <summary>
            Navigates one step forward in history.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Forms.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.Stop">
            <summary>
            Stops the current navigation.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Forms.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.Reload">
            <summary>
            Reloads the current page.
            </summary>
            <returns>
            True if the view is alive and the command was successfully sent. False otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.ExecuteJavascript(System.String)">
            <summary>
            Executes a string of Javascript in the context of the current page
            asynchronously.
            </summary>
            <param name="javascript">The string of Javascript to execute.</param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Forms.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.ExecuteJavascript(System.String,System.String)">
            <summary>
            Executes a string of Javascript in the context of the current page
            asynchronously.
            </summary>
            <param name="javascript">The string of Javascript to execute.</param>
            <param name="frameName">Optional; the name of the frame to execute in,
            leave this blank to execute in the main frame.</param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Forms.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.ExecuteJavascriptWithResult(System.String)">
            <summary>
            Executes a string of Javascript in the context of the current page
            synchronously, and returns the result.
            </summary>
            <param name="javascript">The string of Javascript to execute.</param>
            <returns>Returns the result as a <see cref="T:Awesomium.Core.JSValue"/>. Please note that the returned
            result is only a shallow, read-only copy of the original object. This
            method does not return system-defined Javascript objects (such as "window",
            "document", or any DOM elements).</returns>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Forms.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.ExecuteJavascriptWithResult(System.String,System.Int32)">
            <summary>
            Executes a string of Javascript in the context of the current page
            synchronously, and returns the result.
            </summary>
            <param name="javascript">The string of Javascript to execute.</param>
            <param name="timeoutMs">Optional; the maximum time to wait for the result
            to be computed. Leave this 0 to wait forever (may hang if Javascript is 
            invalid!)</param>
            <returns>Returns the result as a <see cref="T:Awesomium.Core.JSValue"/>. Please note that the returned
            result is only a shallow, read-only copy of the original object. This
            method does not return system-defined Javascript objects (such as "window",
            "document", or any DOM elements).</returns>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Forms.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.ExecuteJavascriptWithResult(System.String,System.String,System.Int32)">
            <summary>
            Executes a string of Javascript in the context of the current page
            synchronously, and returns the result.
            </summary>
            <param name="javascript">The string of Javascript to execute.</param>
            <param name="frameName">Optional; the name of the frame to execute in,
            leave this blank to execute in the main frame.</param>
            <param name="timeoutMs">Optional; the maximum time to wait for the result
            to be computed. Leave this 0 to wait forever (may hang if Javascript is 
            invalid!)</param>
            <returns>Returns the result as a <see cref="T:Awesomium.Core.JSValue"/>. Please note that the returned
            result is only a shallow, read-only copy of the original object. This
            method does not return system-defined Javascript objects (such as "window",
            "document", or any DOM elements).</returns>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Forms.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.CallJavascriptFunction(System.String,System.String,Awesomium.Core.JSValue[])">
            <summary>
            Calls a certain function defined in Javascript, directly.
            </summary>
            <param name="objectName">
            The name of the object that contains the function, pass an empty string if the function is defined in the global scope.
            </param>
            <param name="function">
            The name of the function.
            </param>
            <param name="arguments">
            The arguments to pass to the function.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Forms.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.CallJavascriptFunction(System.String,System.String,System.String,Awesomium.Core.JSValue[])">
            <summary>
            Calls a certain function defined in Javascript, directly.
            </summary>
            <param name="objectName">
            The name of the object that contains the function, pass an empty string if the function is defined in the global scope.
            </param>
            <param name="function">
            The name of the function.
            </param>
            <param name="frameName">
            Optional; the name of the frame to execute in,
            leave this blank to execute in the main frame.
            </param>
            <param name="arguments">
            The arguments to pass to the function.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Forms.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.CreateObject(System.String)">
            <summary>
            Creates a new global Javascript object that will persist throughout
            the lifetime of this <see cref="T:Awesomium.Windows.Forms.WebControl"/>. This is useful for exposing your application's
            data and events to Javascript. This object is managed directly by Awesomium
            so you can modify its properties and bind callback functions via
            <see cref="M:Awesomium.Windows.Forms.WebControl.SetObjectProperty(System.String,System.String,Awesomium.Core.JSValue)"/> and <see cref="M:Awesomium.Windows.Forms.WebControl.SetObjectCallback(System.String,System.String,Awesomium.Core.JSCallback)"/>, 
            respectively.
            </summary>
            <param name="objectName">
            The name of the object.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Forms.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.DestroyObject(System.String)">
            <summary>
            Destroys a Javascript object previously created with <see cref="M:Awesomium.Windows.Forms.WebControl.CreateObject(System.String)"/>.
            </summary>
            <param name="objectName">
            The name of the object to destroy.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Forms.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.SetObjectProperty(System.String,System.String,Awesomium.Core.JSValue)">
            <summary>
            Sets a property of a Javascript object previously created with <see cref="M:Awesomium.Windows.Forms.WebControl.CreateObject(System.String)"/>.
            </summary>
            <example>
            An example of usage:
            <code>
            webView.CreateObject("MyObject");
            webView.SetObjectProperty("MyObject", "color", "blue");
            </code>
            You can now access this object's property via Javascript on any 
            page loaded into this WebView:
            <code lang="JavaScript">
            var myColor = MyObject.color; // value would be "blue"
            </code>
            </example>
            <param name="objectName">
            The name of the Javascript object.
            </param>
            <param name="propertyName">
            The name of the property to create.
            </param>
            <param name="val">
            The initial javascript-value of the property.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Forms.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.SetObjectCallback(System.String,System.String,Awesomium.Core.JSCallback)">
            <summary>
            Binds a callback function to a Javascript object previously created with <see cref="M:Awesomium.Windows.Forms.WebControl.CreateObject(System.String)"/>.
            This is very useful for passing events from Javascript to your application.
            </summary>
            <example>
            An example of usage:
            <code>
            public void OnSelectItem(object sender, JSCallbackEventArgs e)
            {
                System.Console.WriteLine( "Player selected item: " + e.args[0].ToString() );
            }
            
            public void initWebView()
            {
                webView.CreateObject("MyObject");
                webView.SetObjectCallback("MyObject", "SelectItem", OnSelectItem);
            }
            </code>
            You can now call the function <c>OnSelectItem</c> from Javascript:
            <code lang="JavaScript">
            MyObject.SelectItem("shotgun");
            </code>
            </example>
            <param name="objectName">
            The name of the Javascript object.
            </param>
            <param name="callbackName">
            The name of the Javascript function that will call the callback.
            </param>
            <param name="callback">
            Reference to a <see cref="T:Awesomium.Core.JSCallback"/> implementation.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Forms.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.Cut">
            <summary>
            Cuts the text currently selected in this <see cref="T:Awesomium.Windows.Forms.WebControl"/>, when it has keyboard focus
            (usually in a text-box), using the system clipboard.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Forms.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.Copy">
            <summary>
            Copies the text currently selected in this <see cref="T:Awesomium.Windows.Forms.WebControl"/>, to the system clipboard.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Forms.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.CopyHTML">
            <summary>
            Copies the HTML content currently selected in this <see cref="T:Awesomium.Windows.Forms.WebControl"/>, to the system clipboard.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Forms.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.CopyLinkAddress">
            <summary>
            Copies the target URL of the link currently under the cursor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Forms.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.Paste">
            <summary>
            Pastes the text currently in the system clipboard, to this <see cref="T:Awesomium.Windows.Forms.WebControl"/>,
            when it has keyboard focus (usually in a text-box).
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Forms.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.SelectAll">
            <summary>
            Selects all content on the current page.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Forms.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.ResetZoom">
            <summary>
            Resets the zoom level.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Forms.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.GetZoomForHost(System.String)">
            <summary>
            Gets the zoom factor (percent of page) saved for a certain hostname.
            </summary>
            <param name="host">
            The hostname whose saved zoom setting will be retrieved.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Forms.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.SetURLFilteringMode(Awesomium.Core.URLFilteringMode)">
            <summary>
            Sets the current URL Filtering Mode to use.
            </summary>
            <param name="filteringMode">
            The URL Filtering Mode to use. Default is <see cref="F:Awesomium.Core.URLFilteringMode.None"/>.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Forms.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.AddURLFilter(System.String)">
            <summary>
            Adds a new URL Filter rule.
            </summary>
            <param name="filter">
            A string with optional wildcards that describes a certain URL.
            </param>
            <example>
            For example, to match all URLs from the domain "google.com", your filter string can be: http://google.com/*
            </example>
            <remarks> 
            You may also use the "local://" scheme prefix to describe the URL to the base directory
            (set via <see cref="P:Awesomium.Core.WebCore.BaseDirectory"/>).
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Forms.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.ClearAllURLFilters">
            <summary>
            Clears all URL Filter rules previously added with <see cref="M:Awesomium.Windows.Forms.WebControl.AddURLFilter(System.String)"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Forms.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.SetHeaderDefinition(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Defines a new Header Definition or updates it if it already exists.
            </summary>
            <param name="name">
            The unique name of the Header Definition; this is used to refer to it later in <see cref="M:Awesomium.Windows.Forms.WebControl.AddHeaderRewriteRule(System.String,System.String)"/> and related methods.
            </param>
            <param name="fields">
            A name/value collection representing field names and their respective values.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Forms.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.AddHeaderRewriteRule(System.String,System.String)">
            <summary>
            Adds a new a header re-write rule. 
            All requests whose URL matches the specified rule will have its HTTP headers re-written 
            with the specified header definition before sending it to the server.
            </summary>
            <param name="rule">
            A string with optional wildcards (*, ?) that matches the URL(s) that will have their headers 
            re-written with the specified header definition.
            </param>
            <param name="name">
            The name of the header definition (specified in <see cref="M:Awesomium.Windows.Forms.WebControl.SetHeaderDefinition(System.String,System.Collections.Specialized.NameValueCollection)"/>).
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Forms.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.RemoveHeaderRewriteRule(System.String)">
            <summary>
            Removes a header re-write rule previously added with <see cref="M:Awesomium.Windows.Forms.WebControl.AddHeaderRewriteRule(System.String,System.String)"/>.
            </summary>
            <param name="rule">
            The rule to remove (should match the string specified in for the "rule" parameter 
            in <see cref="M:Awesomium.Windows.Forms.WebControl.AddHeaderRewriteRule(System.String,System.String)"/>, exactly).
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Forms.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.RemoveHeaderRewriteRulesByDefinition(System.String)">
            <summary>
            Removes all header re-write rules that are using a certain header definition.
            </summary>
            <param name="name">
            The name of the header definition (specified in <see cref="M:Awesomium.Windows.Forms.WebControl.SetHeaderDefinition(System.String,System.Collections.Specialized.NameValueCollection)"/>).
            Specify an empty string, to remove all header re-write rules.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Forms.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.Print">
            <summary>
            Prints the current page.
            </summary>
            <remarks>
            To suppress the printer selection dialog
            and print immediately using OS defaults, 
            see <see cref="M:Awesomium.Core.WebCore.SuppressPrinterDialog(System.Boolean)"/>.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Forms.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.RequestScrollData">
            <summary>
            Request the page dimensions and scroll position of the page.
            </summary>
            <remarks>
            You can retrieve the response by handling the <see cref="E:Awesomium.Windows.Forms.WebControl.ScrollDataReceived"/> event.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Forms.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.RequestScrollData(System.String)">
            <summary>
            Request the page dimensions and scroll position of the page.
            </summary>
            <remarks>
            You can retrieve the response by handling the <see cref="E:Awesomium.Windows.Forms.WebControl.ScrollDataReceived"/> event.
            </remarks>
            <param name="frameName">
            The frame's scroll data to retrieve. Leave blank to get the main frame's scroll data.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Forms.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.Find(System.String)">
            <summary>
            Start searching down the current web-page, for a certain string.
            </summary>
            <remarks>
            All matches of the string will be highlighted on the page and you can jump to different 
            instances of the string by using the <see cref="M:Awesomium.Windows.Forms.WebControl.FindNext"/> method.
            To get actual stats about a certain query, please see <see cref="E:Awesomium.Windows.Forms.WebControl.FindResultsReceived"/>.
            </remarks>
            <param name="searchStr">
            The string to search for.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Forms.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.Find(System.String,System.Boolean)">
            <summary>
            Start searching for a certain string on the current web-page.
            </summary>
            <remarks>
            All matches of the string will be highlighted on the page and you can jump to different 
            instances of the string by using the <see cref="M:Awesomium.Windows.Forms.WebControl.FindNext"/> method.
            To get actual stats about a certain query, please see <see cref="E:Awesomium.Windows.Forms.WebControl.FindResultsReceived"/>.
            </remarks>
            <param name="searchStr">
            The string to search for.
            </param>
            <param name="forward">
            True to search forward, down the page. False otherwise.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Forms.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.Find(System.String,System.Boolean,System.Boolean)">
            <summary>
            Start finding a certain string on the current web-page.
            </summary>
            <remarks>
            All matches of the string will be highlighted on the page and you can jump to different 
            instances of the string by using the <see cref="M:Awesomium.Windows.Forms.WebControl.FindNext"/> method.
            To get actual stats about a certain query, please see <see cref="E:Awesomium.Windows.Forms.WebControl.FindResultsReceived"/>.
            </remarks>
            <param name="searchStr">
            The string to search for.
            </param>
            <param name="forward">
            True to search forward, down the page. False otherwise.
            </param>
            <param name="caseSensitive">
            True to perform a case sensitive search. False otherwise.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Forms.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.FindNext">
            <summary>
            Jump to the next match of a previously successful search.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Forms.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.FindNext(System.Boolean)">
            <summary>
            Jump to the next match of a previously successful search.
            </summary>
            <param name="forward">
            True to search forward, down the page. False otherwise.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Forms.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.StopFind(System.Boolean)">
            <summary>
            Stops the last active search (started with <see cref="M:Awesomium.Windows.Forms.WebControl.Find(System.String)"/>).
            </summary>
            <remarks>
            This will un-highlight all matches of a previous call to <see cref="M:Awesomium.Windows.Forms.WebControl.Find(System.String)"/>.
            </remarks>
            <param name="clearSelection">
            True to also deselect the currently selected string. False otherwise.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Forms.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.TranslatePage(System.String,System.String)">
            <summary>
            Attempt automatic translation of the current page via Google Translate.
            </summary>
            <remarks>
            The defined language codes are ISO 639-2.
            </remarks>
            <param name="sourceLanguage">
            The language to translate from (for ex. "en" for English).
            </param>
            <param name="targetLanguage">
            The language to translate to (for ex. "fr" for French).
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Forms.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.ActivateIME(System.Boolean)">
            <summary>
            Call this method to let the <see cref="T:Awesomium.Windows.Forms.WebControl"/> know you will be passing
            text input via IME and will need to be notified of any IME-related
            events (such as caret position, user un-focusing text-box, etc.).
            </summary>
            <param name="activate">
            True to activate IME support. False otherwise.
            </param>
            <seealso cref="E:Awesomium.Windows.Forms.WebControl.ImeUpdated"/>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Forms.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.SetIMEComposition(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create or update the current IME text composition.
            </summary>
            <param name="inputStr">The string generated by your IME.</param>
            <param name="cursorPos">The current cursor position in your IME composition.</param>
            <param name="targetStart">The position of the beginning of the selection.</param>
            <param name="targetEnd">The position of the end of the selection.</param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Forms.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.ConfirmIMEComposition(System.String)">
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Forms.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.CancelIMEComposition">
            <summary>
            Cancels IME text composition.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Forms.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.CopyImageAt(System.Int32,System.Int32)">
            <summary>
            Copies an image on the page to the system clipboard.
            </summary>
            <param name="x">
            The X coordinate in a web page where an image is located.
            </param>
            <param name="y">
            The Y coordinate in a web page where an image is located.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Forms.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.SaveToPNG(System.String)">
            <summary>
            Save the current visual buffer to a PNG image.
            </summary>
            <param name="filePath">
            The path to the file that will be written.
            </param>
            <returns>
            True if the file is successfully saved. False otherwise.
            </returns>
            <remarks>
            This method may fail and return false if the width or the height of the control,
            is less than, or equal to zero.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Forms.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.SaveToPNG(System.String,System.Boolean)">
            <summary>
            Save the current visual buffer to a PNG image.
            </summary>
            <param name="filePath">
            The path to the file that will be written.
            </param>
            <param name="preserveTransparency">
            True to preserve transparency (alpha) values. False otherwise.
            </param>
            <returns>
            True if the file is successfully saved. False otherwise.
            </returns>
            <remarks>
            This method may fail and return false if the width or the height of the control,
            is less than, or equal to zero.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Forms.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.SaveToJPEG(System.String,System.Int32)">
            <summary>
            Save the current visual buffer to a JPEG image.
            </summary>
            <param name="filePath">
            The path to the file that will be written.
            </param>
            <param name="quality">
            The compression quality to use, the valid range is 0 to 100, with 100 being the highest.
            </param>
            <returns>
            True if the image was successfully saved. False otherwise.
            </returns>
            <remarks>
            This method may fail and return false if the width or the height of the control,
            is less than, or equal to zero.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Forms.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>).
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            An invalid compression quality value is specified.
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.DeferInput">
            <summary>
            Enters a defer cycle that you can use to temporarily block all input to the control.
            </summary>
            <returns>
            A disposable <see cref="P:Awesomium.Windows.Forms.WebControl.InputController"/> that can be used with a <c>using</c>
            statement to create a defer cycle.
            </returns>
            <remarks>
            This method updates the status of input processing and adds the previous status
            to the stack.
            </remarks>
            <example>
            <code>
            using ( webControl.DeferInput() )
            {
                // Perform operations with all input blocked.
            } // Restores input processing to its previous status.
            </code>
            <code lang="VB">
            ' Block all input.
            Using MyWebControl.DeferInput()
                ' Perform operations with all input blocked.
            End Using ' Restores input processing to its previous status.
            </code>
            </example>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Forms.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>).
            </exception>
            <seealso cref="P:Awesomium.Core.WebView.InputController"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.DeferInput(Awesomium.Core.ViewInput)">
            <summary>
            Enters a defer cycle that you can use to temporarily block specified input to the control.
            </summary>
            <param name="input">
            A combination of input types specified 
            in <see cref="T:Awesomium.Core.ViewInput"/>, indicating the 
            input(s) to be blocked.
            </param>
            <remarks>
            This method updates the status of input processing and adds the previous status
            to the stack.
            </remarks>
            <returns>
            A disposable <see cref="P:Awesomium.Windows.Forms.WebControl.InputController"/> that can be used with a <c>using</c>
            statement to create a defer cycle.
            </returns>
            <example>
            <code>
            // Block mouse and touch input.
            using ( webView.DeferInput( ViewInput.Mouse | ViewInput.Touch ) )
            {
                // Perform operations with mouse and touch input blocked.
                
                using ( webView.DeferInput( ViewInput.Keyboard ) )
                {
                    // Perform operations with mouse, touch and keyboard input blocked.
                    
                } // Restores input processing to its previous status, blocking only
                  // mouse and touch input.
                  
            } // Restores input processing to its initial status.
            </code>
            <code lang="VB">
            ' Block mouse and touch input.
            Using MyWebControl.DeferInput( ViewInput.Mouse Or ViewInput.Touch )
            
                ' Perform operations with mouse and touch input blocked.
                
                Using MyWebControl.DeferInput( ViewInput.Keyboard )
                
                    ' Perform operations with mouse, touch and keyboard input blocked.
                
                End Using ' Restores input processing to its previous status, blocking only
                          ' mouse and touch input.
                          
            End Using ' Restores regular input processing.
            </code>
            </example>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Forms.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>).
            </exception>
            <seealso cref="P:Awesomium.Windows.Forms.WebControl.InputController"/>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.Repaint">
            <summary>
            Forces this <see cref="T:Awesomium.Windows.Forms.WebControl"/> to repaint the pixel 
            buffer of its underlying web view.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Forms.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.RaisePropertyChanged(System.String)">
            <summary>
            Helper method to raise the <see cref="E:Awesomium.Windows.Forms.WebControl.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">
            The name of the property whose value has changed.
            </param>
        </member>
        <member name="M:Awesomium.Windows.Forms.WebControl.OnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Forms.WebControl.PropertyChanged"/> event.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.IsDirtyChanged">
            <summary>
            Occurs when this <see cref="T:Awesomium.Windows.Forms.WebControl"/> needs to be rendered again.
            </summary>
            <remarks>
            <para>
            This event is fired continuously while <see cref="P:Awesomium.Windows.Forms.WebControl.IsDirty"/> is true and until a call 
            to <see cref="M:Awesomium.Windows.Forms.WebControl.Render"/> is made that will render the updated view into an offscreen
            pixel buffer and clear the dirty state.
            </para>
            <para>
            This event is not automatically fired if you are running Awesomium from a non-UI
            thread. Please read the Remarks section of <see cref="M:Awesomium.Core.WebCore.Update"/> for
            details.
            </para>
            </remarks>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.BeginLoading">
            <summary>
            This event occurs when a <see cref="T:Awesomium.Windows.Forms.WebControl"/> begins loading a new page (first bits of data received from server).
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.BeginNavigation">
            <summary>
            This event occurs when a <see cref="T:Awesomium.Windows.Forms.WebControl"/> begins navigating to a new URL.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.CursorChanged">
            <summary>
            This event occurs when the mouse cursor type changes.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.KeyboardFocusChanged">
            <summary>
            This event occurs when keyboard focus changes (usually as a result of a text-box being focused).
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.TargetUrlChanged">
            <summary>
            This event occurs when the target URL changes (usually the result of hovering over a link).
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.ToolTipChanged">
            <summary>
            This event occurs when the tooltip text changes.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.DomReady">
            <summary>
            This event occurs once the document has been parsed for a page but before all resources (images, etc.)
            have been loaded. This is your first chance to execute Javascript on a page (useful for initialization purposes).
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.LoadCompleted">
            <summary>
            This event occurs once a page (and all of its sub-frames) has completely finished loading.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.PageContentsReceived">
            <summary>
            This event occurs once the page contents (as text) have been retrieved (usually after the end
            of each page load). This plain text is useful for indexing/search purposes.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.OpenExternalLink">
            <summary>
            This event occurs when an external link is attempted to be opened. An external link
            is any link that normally opens in a new window (for example, links with target="_blank", calls
            to window.open(), and URL open events from Flash plugins). You are responsible for
            creating a new <see cref="T:Awesomium.Core.WebView"/> or <see cref="T:Awesomium.Windows.Forms.WebControl"/> to handle these URLs yourself.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.PluginCrashed">
            <summary>
            This event occurs whenever a plugin crashes on a page (usually Flash).
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.TitleReceived">
            <summary>
            This event occurs once we receive the page title.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.Move">
            <summary>
            This event occurs whenever the window is requested to be moved (via Javascript).
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.Download">
            <summary>
            This event occurs whenever a URL is requested to be downloaded (you must handle this yourself).
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.Crashed">
            <summary>
            This event occurs when the renderer (which is isolated in a separate process) crashes unexpectedly.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.SelectLocalFiles">
            <summary>
            This event occurs whenever a page requests a file chooser dialog to be displayed (usually due
            to an upload form being clicked by a user). You will need to display your own dialog.
            </summary>
            <remarks>
            Assign the selected local file(s) to <see cref="P:Awesomium.Core.SelectLocalFilesEventArgs.SelectedFiles"/>.
            </remarks>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.ScrollDataReceived">
            <summary>
            This event fires in response to <see cref="M:Awesomium.Windows.Forms.WebControl.RequestScrollData"/>.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.JSConsoleMessageAdded">
            <summary>
            This event occurs whenever a new message is added to the Javascript Console (usually
            the result of a Javascript error).
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.FindResultsReceived">
            <summary>
            This event occurs whenever we receive results back from an in-page find operation
            (<see cref="M:Awesomium.Windows.Forms.WebControl.Find(System.String)"/>).
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.SelectionChanged">
            <summary>
            This event occurs when the selection in the current page, changes.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.ImeUpdated">
            <summary>
            This event occurs whenever the user does something that changes the 
            position or visibility of the IME Widget. This event is only active when 
            IME is activated (please see <see cref="M:Awesomium.Windows.Forms.WebControl.ActivateIME(System.Boolean)"/>).
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.ShowContextMenu">
            <summary>
            Occurs in response to right-click in a web-page.
            </summary>
            <seealso cref="P:Awesomium.Windows.Forms.WebControl.LatestContextData"/>
            <seealso cref="T:Awesomium.Core.WebViewContext"/>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.LoginRequest">
            <summary>
            Occurs whenever a page requests authentication from the user (ex, Basic HTTP Auth, NTLM Auth, etc.).
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.HistoryChanged">
            <summary>
            Occurs when the history state has changed. 
            (eg, the state of the back/forward buttons should be updated)
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.ResizeComplete">
            <summary>
            Occurs when a web view has finished resizing to a certain size (and has finished repainting the <see cref="T:Awesomium.Core.RenderBuffer"/>).
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.ShowJavascriptDialog">
            <summary>
            Occurs when JS code in a web page requests for a Javascript Dialog.
            </summary>
            <remarks>
            Windows Forms <see cref="T:Awesomium.Windows.Forms.WebControl"/> internally handles simple dialogs.
            <note>
            <see cref="F:Awesomium.Core.JSDialogFlags.HasPromptField"/> dialogs are currently
            not internally handled by the Windows Forms <see cref="T:Awesomium.Windows.Forms.WebControl"/>.
            </note>
            Read <see cref="P:Awesomium.Core.JavascriptDialogEventArgs.Handled"/> for ways
            to manually handle this event.
            </remarks>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.ResourceRequest">
            <summary>
            This event occurs whenever there is a request for a certain resource (URL). You can either modify the request
            before it is sent or immediately return your own custom response. This is useful for implementing your own
            custom resource-loading back-end or for tracking of resource loads.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.ResourceResponse">
            <summary>
            This event occurs whenever a response has been received from a server. This is useful for statistics
            and resource tracking purposes.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.CreateParams">
            <inheritdoc />
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.ForeColor">
            <exclude />
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.ForeColorChanged">
            <exclude />
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.Font">
            <exclude />
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.FontChanged">
            <exclude />
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.RightToLeft">
            <exclude />
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.RightToLeftChanged">
            <exclude />
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.Text">
            <exclude />
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.TextChanged">
            <exclude />
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.AllowDrop">
            <exclude />
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.CausesValidation">
            <exclude />
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.CausesValidationChanged">
            <exclude />
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.IsDesignerHosted">
            <summary>
            The DesignMode property does not correctly tell you if
            you are in design mode. IsDesignerHosted is a corrected
            version of that property.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.CanRecreateView">
            <summary>
            Gets if this control wraps a previously crashed
            view that can be recreated.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.IsLive">
            <summary>
            Gets if the underlying web-view this control wraps, is alive.
            </summary>
            <returns>
            A <see cref="T:System.Boolean"/> value indicating if the underlying web-view this control wraps, 
            is alive. <c>False</c> indicates that the underlying web-view is:
            <list type="bullet">
            <item>
            <description>
            Crashed (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsCrashed"/>).
            <note>
            When crashed, this control will attempt to recreate its underlying view.
            For details, see: <see cref="P:Awesomium.Windows.Forms.WebControl.IsCrashed"/>.
            </note>
            </description>
            </item>
            <item>
            <description>
            Prematurely destroyed (see <see cref="M:Awesomium.Windows.Forms.WebControl.Close"/>).
            </description>
            </item>
            <item>
            <description>
            Not properly instantiated. This means that something went wrong
            during instantiation of either the <see cref="T:Awesomium.Core.WebCore"/> (if this
            is the first <see cref="T:Awesomium.Windows.Forms.WebControl"/> created) or of the
            underlying web-view.
            </description>
            </item>
            </list>
            </returns>
            <remarks>
            Developers should always check this property before calling <see cref="T:Awesomium.Core.IWebView"/>
            members implemented by this <see cref="T:Awesomium.Windows.Forms.WebControl"/>. Trying to access the underlying
            web-view when it is not alive, can throw an <see cref="T:System.InvalidOperationException"/>.
            <p/>
            For more details, refer to the documentation of this control's members.
            <p/>
            <note>
            This property also returns <c>false</c> when the control is shown in a designer.
            The Awesomium <see cref="T:Awesomium.Core.WebCore"/> and the underlying web-view, are only instantiated
            during runtime.
            </note>
            </remarks>
            <example>
            <code>
            private void toolStripButton2_Click( object sender, EventArgs e )
            {
                if ( !webControl.IsLive )
                    return;
                    
                webControl.GoForward();
            }
            </code>
            <code lang="VB">
            Private Sub ToolStripButton2_Click( sender As Object, e As EventArgs ) Handles ToolStripButton2.Click
                If Not m_WebControl.IsLive Then Return
                    
                m_WebControl.GoForward()
            End Sub
            </code>
            </example>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.IsSourceView">
            <summary>
            Gets if this control displays the HTML source of any web-page loaded.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.IsDirty">
            <summary>
            Gets whether or not this <see cref="T:Awesomium.Core.WebView"/> needs to be rendered again.
            </summary>
            <remarks>
            Internal changes to this property fire the <see cref="E:Awesomium.Windows.Forms.WebControl.IsDirtyChanged"/>
            and <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> events,
            only if <see cref="P:Awesomium.Core.WebCore.IsAutoUpdateEnabled"/> is true.
            </remarks>
            <seealso cref="E:Awesomium.Windows.Forms.WebControl.IsDirtyChanged"/>
            <seealso cref="M:Awesomium.Core.WebCore.Update"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.IsResizing">
            <summary>
            Checks whether or not there is a resize operation pending.
            </summary>
            <returns>
            True if we are waiting for the <see cref="T:Awesomium.Core.WebView"/> process to
            return acknowledgment of a pending resize operation. False otherwise.
            </returns>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.IsLoadingPage">
            <summary>
            Gets if a page is currently loading in the <see cref="T:Awesomium.Core.WebView"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.IsNavigating">
            <summary>
            Gets if the <see cref="T:Awesomium.Windows.Forms.WebControl"/> is currently navigating to a Url.
            </summary>
            <remarks>
            Unlike <see cref="P:Awesomium.Windows.Forms.WebControl.IsLoadingPage"/> that updates when the actual contents
            of a page are being downloaded, this property is updated when navigation
            starts and updates again when loading completes.
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.Title">
            <summary>
            Gets the title of the page currently loaded in this <see cref="T:Awesomium.Core.WebView"/>.
            </summary>
            <remarks>
            This property may also reflect navigation progress.
            For details, see <see cref="P:Awesomium.Windows.Forms.WebControl.NavigationInfo"/>.
            </remarks>
            <seealso cref="P:Awesomium.Windows.Forms.WebControl.NavigationInfo"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.HasTitle">
            <summary>
            Gets if the currently loaded web-page has a title.
            </summary>
            <seealso cref="P:Awesomium.Windows.Forms.WebControl.Title"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.DirtyBounds">
            <summary>
            Gets the bounds of the area that has changed since the last call to <see cref="M:Awesomium.Windows.Forms.WebControl.Render"/>.
            </summary>
            <returns>
            An <see cref="T:Awesomium.Core.AweRect"/> representing the bounds of the area that has changed 
            since the last call to <see cref="M:Awesomium.Windows.Forms.WebControl.Render"/>.
            </returns>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.HistoryBackCount">
            <summary>
            Gets the available number of steps back in history.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.HistoryForwardCount">
            <summary>
            Gets the available number of steps forward in history.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.ToolTip">
            <summary>
            Gets the current tooltip for the element under the cursor.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.HasKeyboardFocus">
            <summary>
            Gets if this <see cref="T:Awesomium.Core.WebView"/> currently has keyboard focus.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.HasTargetURL">
            <summary>
            Gets if this <see cref="T:Awesomium.Core.WebView"/> is currently indicating a target URL,
            usually as a result of hovering over a link on the page.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.TargetURL">
            <summary>
            Gets the target URL indicated by the <see cref="T:Awesomium.Core.WebView"/>,
            usually as a result of hovering over a link on the page.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.IsCrashed">
            <summary>
            Gets if the renderer of this <see cref="T:Awesomium.Core.WebView"/> (which is isolated in a separate process) has crashed.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.PageContents">
            <summary>
            Gets the textual representation of the contents of the page currently loaded.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.IsDomReady">
            <summary>
            Gets if DOM (Document Object Model) for the page being loaded, is ready.
            </summary>
            <remarks>
            This is very useful for executing Javascript on a page before its content has finished loading.
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.HasSelection">
            <summary>
            Gets if the user has selected content in the current page.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.Selection">
            <summary>
            Gets a <see cref="P:Awesomium.Windows.Forms.WebControl.Selection"/> providing information about the current selection range.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.InputController">
            <summary>
            Get's this control's <see cref="P:Awesomium.Windows.Forms.WebControl.InputController"/> that allows manipulation of input processing.
            </summary>
            <returns>
            An <see cref="P:Awesomium.Windows.Forms.WebControl.InputController"/> that allows manipulation of input processing.
            </returns>
            <remarks>
            To create temporary input defer cycles, use <see cref="M:Awesomium.Windows.Forms.WebControl.DeferInput"/>.
            </remarks>
            <seealso cref="M:Awesomium.Windows.Forms.WebControl.DeferInput"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.LatestContextData">
            <summary>
            Gets the latest web view context data updated by a right-click in a web-page.
            </summary>
            <returns>
            A <see cref="T:Awesomium.Core.WebViewContext"/> that represents the latest web view context data.
            </returns>
            <seealso cref="T:Awesomium.Core.WebViewContext"/>
            <seealso cref="E:Awesomium.Windows.Forms.WebControl.ShowContextMenu"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.SelfUpdate">
            <summary>
            Gets or sets if this <see cref="T:Awesomium.Windows.Forms.WebControl"/> should use an independent rendering timer. 
            </summary>
            <remarks>
            <note type="caution">
            Setting this property to <c>true</c> will fail if <see cref="P:Awesomium.Core.WebCore.IsAutoUpdateEnabled"/> is <c>false</c>.
            It is suggested that you check the value of <see cref="P:Awesomium.Core.WebCore.IsAutoUpdateEnabled"/> before attempting
            to activate <see cref="P:Awesomium.Windows.Forms.WebControl.SelfUpdate"/>.
            </note>
            <p/>
            When auto-update is enabled (see <see cref="P:Awesomium.Core.WebCore.IsAutoUpdateEnabled"/>), updating
            <see cref="P:Awesomium.Windows.Forms.WebControl.IsDirty"/> and refreshing views, is controlled by the <see cref="T:Awesomium.Core.WebCore"/>
            using an internal timer, common for all views. The same timer is used to update the <see cref="T:Awesomium.Core.WebCore"/>
            (see <see cref="M:Awesomium.Core.WebCore.Update"/>) and fire events. While this is a light and effective technique, it is
            not ideal when you require high performance quality, such as when video content is displayed in views.
            In these scenarios, setting <see cref="P:Awesomium.Windows.Forms.WebControl.SelfUpdate"/> to <c>true</c> will tell the view to use an
            independent timer for rendering only, that will significantly improve the rendering quality, to the expense
            of CPU resources.
            <p/>
            <note type="caution">
            You should always combine the use of <see cref="P:Awesomium.Windows.Forms.WebControl.SelfUpdate"/> with the use of <see cref="P:System.Windows.Forms.Control.Enabled"/> or <see cref="P:Awesomium.Windows.Forms.WebControl.IsRendering"/>.
            When more than one views are using <see cref="P:Awesomium.Windows.Forms.WebControl.SelfUpdate"/> and they all display content that updates too fast (such as videos), 
            controls that are currently not visible to the user (such as controls that are currently covered by other UI or used in a tab 
            of a tab-control that is currently not visible), should have rendering paused (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsRendering"/>),
            to avoid draining out your CPU resources.
            </note>
            <p/>
            <note>
            The default setting for the Windows Forms <see cref="T:Awesomium.Windows.Forms.WebControl"/>, is <c>false</c>.
            </note>
            </remarks>
            <seealso cref="P:Awesomium.Windows.Forms.WebControl.IsRendering"/>
            <seealso cref="M:Awesomium.Windows.Forms.WebControl.OnEnabledChanged(System.EventArgs)"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.IsRendering">
            <summary>
            Gets or sets if internal asynchronous rendering is currently enabled.
            </summary>
            <remarks>
            All rendering is actually done asynchronously in a separate process
            and so the page is usually continuously rendering internally.
            <note>
            This property is automatically updated by monitoring the control's
            enabled status and it should not be manually set.
            The update occurs in <see cref="M:Awesomium.Windows.Forms.WebControl.OnEnabledChanged(System.EventArgs)"/>.
            </note>
            <note type="inherit">
            Inheritors can override <see cref="M:Awesomium.Windows.Forms.WebControl.OnEnabledChanged(System.EventArgs)"/>, then set this
            property manually if they want to <i>disconnect</i> internal asynchronous 
            rendering, from the control's enabled status.
            </note>
            </remarks>
            <seealso cref="P:Awesomium.Windows.Forms.WebControl.SelfUpdate"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.IsTransparent">
            <summary>
            Gets or sets if pages should be rendered with transparency
            preserved (for ex, for pages with style="background-color: transparent;")
            </summary>
            <returns>
            A boolean value indicating whether or not this <see cref="T:Awesomium.Windows.Forms.WebControl"/> is transparent.
            </returns>
            <remarks>
            <note type="caution">
            This property is incompatible with <see cref="P:Awesomium.Windows.Forms.WebControl.FlushAlpha"/>. You need to make sure that <see cref="P:Awesomium.Windows.Forms.WebControl.FlushAlpha"/>
            is set to <c>false</c> in order to set this property to <c>true</c>.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.FlushAlpha">
            <summary>
            Gets or sets if we should flush the alpha channel to completely opaque values, during rendering.
            The default is true.
            </summary>
            <remarks>
            <note type="caution">
            This property is incompatible with <see cref="P:Awesomium.Windows.Forms.WebControl.IsTransparent"/>. You need to make sure that <see cref="P:Awesomium.Windows.Forms.WebControl.IsTransparent"/>
            is set to <c>false</c> in order to set this property to <c>true</c>.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.Zoom">
            <summary>
            Gets or sets the zoom factor (page percentage) for the current hostname.
            Valid range is from 10% to 500%.
            </summary>
            <remarks>
            This operation is asynchronous: 
            the value may not change for several milliseconds after
            you set this property.
            <note>
            Note that this setting is applied to the current hostname and
            not the control in general. Is it dynamically updated when
            you navigate to another domain with different, or no setting.
            <p/>
            To get the Zoom setting of a given hostname, use <see cref="M:Awesomium.Windows.Forms.WebControl.GetZoomForHost(System.String)"/>.
            </note>
            <note type="caution">
            You can only set this property at runtime.
            </note>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is accessed on an invalid <see cref="T:Awesomium.Windows.Forms.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>).
            </exception>
            <seealso cref="M:Awesomium.Windows.Forms.WebControl.GetZoomForHost(System.String)"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.Source">
            <summary>
            Gets or sets the current URL presented by this <see cref="T:Awesomium.Core.WebView"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> representing the current URL presented 
            by this <see cref="T:Awesomium.Core.WebView"/>.
            </returns>
            <seealso cref="M:Awesomium.Windows.Forms.WebControl.LoadURL(System.String)"/>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.NavigationInfo">
            <summary>
            Gets or sets the navigation info level.
            </summary>
            <returns>
            A <see cref="T:Awesomium.Core.NavigationInfo"/> value indicating
            the level of navigation progress info reflected to the
            <see cref="P:Awesomium.Windows.Forms.WebControl.Title"/>. The default is <see cref="F:Awesomium.Core.NavigationInfo.Verbose"/>.
            </returns>
            <remarks>
            Navigation progress information is reflected to the control's
            <see cref="P:Awesomium.Windows.Forms.WebControl.Title"/>:
            <list type="table">
            <listheader>
            <term>Level</term>
            <description>Title Value</description>
            </listheader>
            <item>
            <term><c>"None"</c></term>
            <description><c>Title</c> only reflects the page's title, if any.</description>
            </item>
            <item>
            <term><c>"Normal"</c></term>
            <description><c>Title</c> reflects the page's title as well as "Error" and "Crashed" status.</description>
            </item>
            <item>
            <term><c>"Verbose"</c></term>
            <description>
            <c>Title</c> reflects progress status such as "Navigating..." and "Loading...",
            until the page's title is acquired. Also reflects "Error" and "Crashed" status. (<b>Default</b>)
            </description>
            </item>
            </list>
            <p/>
            <note>
            Progress information can be localized by adding more localization resources
            to the assembly.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebControl.RenderOperation">
            <summary>
            Gets or sets the method that will be used when
            creating a <see cref="T:System.Drawing.Bitmap"/> for a <see cref="T:Awesomium.Core.RenderBuffer"/>,
            that will be used to paint the web-view's pixel buffer.
            </summary>
            <returns>
            A member of the <see cref="T:Awesomium.Core.RenderOperations"/> enumeration, 
            indicating the method that will be used when
            creating a <see cref="T:System.Drawing.Bitmap"/> for a <see cref="T:Awesomium.Core.RenderBuffer"/>,
            that will be used to paint the web-view's pixel buffer.
            The default is <see cref="F:Awesomium.Core.RenderOperations.PaintAtResize"/>.
            </returns>
            <remarks>
            Changing this property's value, may affect the control's rendering
            performance, in certain scenarios.
            </remarks>
        </member>
        <member name="E:Awesomium.Windows.Forms.WebControl.PropertyChanged">
            <summary>
            Raised when the value of a property of this class, has changed.
            </summary>
        </member>
        <member name="T:Awesomium.Windows.Forms.WebSourceControl">
            <summary>
            Represents a Windows Forms control that displays the HTML source 
            of any web-page loaded using <see cref="M:Awesomium.Windows.Forms.WebControl.LoadURL(System.String)"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Forms.WebSourceControl.IsSourceView">
            <inheritdoc />
        </member>
    </members>
</doc>
